# -*- coding: utf-8 -*-
"""Untitled30.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PMsEJ5pj4gEVbtpyPcnHB5BHxp6VeoMX
"""

import numpy as np
from keras.models import Sequential
from keras.layers import Dense, Reshape, Flatten, Conv2D, Conv2DTranspose, LeakyReLU, Dropout, BatchNormalization
from keras.optimizers import Adam
from keras.datasets import cifar10
import numpy as np
from PIL import Image
import os
import matplotlib.pyplot as plt
from numpy.random import randn, randint
#from google.colab import drive

#drive.mount('/content/gdrive')
#ROOT_DIR = '/content/gdrive/My Drive/combined/combined'

ROOT_DIR = './project/720p'

# Create a directory for generated images if it doesn't exist
generated_images_dir = "./generated_images"
if not os.path.exists(generated_images_dir):
    os.makedirs(generated_images_dir)

# Function to load and resize images
def load_real_samples(directory, target_size=(128, 128)):
    images = []
    for filename in os.listdir(directory):
        if filename.endswith('.jpg'):
            image_path = os.path.join(directory, filename)
            image = Image.open(image_path).convert('RGB')
            image = image.resize(target_size)
            images.append(np.asarray(image))
    images = np.array(images)
    images = (images - 127.5) / 127.5  # Normalize to [-1, 1]
    return images

# Load dataset
dataset = load_real_samples(ROOT_DIR)

# Function to display dataset images
def show_dataset_images(dataset, n=10):
    plt.figure(figsize=(10, 10))
    for i in range(n):
        plt.subplot(1, n, i+1)
        plt.axis('off')
        plt.imshow((dataset[i] * 0.5) + 0.5)  # Rescale the images from [-1,1] to [0,1]
    plt.show()

# Call this function to display images from the dataset
show_dataset_images(dataset)

# Define the standalone discriminator model
def define_discriminator(in_shape=(128,128,3)):
    model = Sequential()
    # First layer
    model.add(Conv2D(64, (3,3), strides=(2, 2), padding='same', input_shape=in_shape))
    model.add(LeakyReLU(alpha=0.2))
    model.add(Dropout(0.4))
    # Second layer
    model.add(Conv2D(128, (3,3), strides=(2, 2), padding='same'))
    model.add(LeakyReLU(alpha=0.2))
    model.add(Dropout(0.4))
    # Third layer
    model.add(Conv2D(256, (3,3), strides=(2, 2), padding='same'))
    model.add(LeakyReLU(alpha=0.2))
    model.add(Dropout(0.4))
    # Fourth layer
    model.add(Conv2D(512, (3,3), strides=(2, 2), padding='same'))
    model.add(LeakyReLU(alpha=0.2))
    model.add(Dropout(0.4))
    # Output layer
    model.add(Flatten())
    model.add(Dense(1, activation='sigmoid'))
    # Compile model
    opt = Adam(lr=0.0002, beta_1=0.5)
    model.compile(loss='binary_crossentropy', optimizer=opt, metrics=['accuracy'])
    return model


# Define the standalone generator model
def define_generator(latent_dim):
    model = Sequential()
    # Adjust these dimensions to match the expected input size
    start_dim = 16  # Start from a 16x16 image
    depth = 128  # Depth of the feature map at the starting layer
    n_nodes = start_dim * start_dim * depth  # This matches the reshape dimensions

    model.add(Dense(n_nodes, input_dim=latent_dim))
    model.add(LeakyReLU(alpha=0.2))
    model.add(Reshape((start_dim, start_dim, depth)))  # Reshape to 16x16x128

    # Upsample to 32x32
    model.add(Conv2DTranspose(128, (4,4), strides=(2,2), padding='same'))
    model.add(LeakyReLU(alpha=0.2))
    model.add(BatchNormalization())

    # Upsample to 64x64
    model.add(Conv2DTranspose(128, (4,4), strides=(2,2), padding='same'))
    model.add(LeakyReLU(alpha=0.2))
    model.add(BatchNormalization())

    # Upsample to 128x128
    model.add(Conv2DTranspose(128, (4,4), strides=(2,2), padding='same'))
    model.add(LeakyReLU(alpha=0.2))
    model.add(BatchNormalization())

    model.add(Conv2D(3, (3,3), activation='tanh', padding='same'))  # Output layer
    return model

# Function to display generated images
def save_generated_images(generator, latent_dim,epoch, n=10):
    latent_points = generate_latent_points(latent_dim, n)
    images = generator.predict(latent_points)
    plt.figure(figsize=(10, 10))
    for i in range(n):
        # Correct image normalization from [-1,1] to [0,1] and convert to uint8
        image = ((images[i] * 0.5) + 0.5) * 255
        image = np.clip(image, 0, 255).astype('uint8')
        img = Image.fromarray(image)
        img.save(os.path.join(generated_images_dir, f"generated_img_epoch_{epoch+1}_img_{i+1}.png"))


# Define the combined generator and discriminator model, for updating the generator
def define_gan(generator, discriminator):
    # Make weights in the discriminator not trainable
    discriminator.trainable = False
    model = Sequential([generator, discriminator])
    # Compile model
    opt = Adam(lr=0.0002, beta_1=0.5)
    model.compile(loss='binary_crossentropy', optimizer=opt)
    return model

# Select real samples
def generate_real_samples(dataset, n_samples):
    ix = randint(0, dataset.shape[0], n_samples)
    X = dataset[ix]
    y = np.ones((n_samples, 1))
    return X, y

# Generate points in latent space as input for the generator
def generate_latent_points(latent_dim, n_samples):
    x_input = randn(latent_dim * n_samples)
    x_input = x_input.reshape(n_samples, latent_dim)
    return x_input

# Use the generator to generate n fake examples and labels
def generate_fake_samples(generator, latent_dim, n_samples):
    x_input = generate_latent_points(latent_dim, n_samples)
    X = generator.predict(x_input)
    y = np.zeros((n_samples, 1))
    return X, y

# Train the generator and discriminator
def train(g_model, d_model, gan_model, dataset, latent_dim, n_epochs=25000, n_batch=128):
    d_loss1_hist, d_loss2_hist, g_loss_hist = [], [], []
    bat_per_epoch = int(dataset.shape[0] / n_batch)
    half_batch = int(n_batch / 2)
    # Manually enumerate epochs
    for i in range(n_epochs):
        d_loss1_epoch, d_loss2_epoch, g_loss_epoch = [], [], []
        # Enumerate batches over the training set
        for j in range(bat_per_epoch):
            # Get randomly selected 'real' samples
            X_real, y_real = generate_real_samples(dataset, half_batch)
            # Update discriminator model weights
            d_loss1, _ = d_model.train_on_batch(X_real, y_real)
            # Generate 'fake' examples
            X_fake, y_fake = generate_fake_samples(g_model, latent_dim, half_batch)
            # Update discriminator model weights
            d_loss2, _ = d_model.train_on_batch(X_fake, y_fake)
            # Prepare points in latent space as input for the generator
            X_gan = generate_latent_points(latent_dim, n_batch)
            # Create inverted labels for the fake samples
            y_gan = np.ones((n_batch, 1))
            # Update the generator via the discriminator's error
            g_loss = gan_model.train_on_batch(X_gan, y_gan)
            # Summarize loss on this batch
            # Store loss values for this batch
            d_loss1_epoch.append(d_loss1)
            d_loss2_epoch.append(d_loss2)
            g_loss_epoch.append(g_loss)
            print('>%d, %d/%d, d1=%.3f, d2=%.3f g=%.3f' % (i+1, j+1, bat_per_epoch, d_loss1, d_loss2, g_loss))

        # Average loss for the epoch
        d_loss1_hist.append(np.mean(d_loss1_epoch))
        d_loss2_hist.append(np.mean(d_loss2_epoch))
        g_loss_hist.append(np.mean(g_loss_epoch))
        # Display generated images periodically - e.g., after every 10 epochs
        if (i+1) % 10 == 0:  # Adjust the frequency as needed
            print(f"Epoch {i+1}, D_loss_real: {d_loss1_hist[-1]}, D_loss_fake: {d_loss2_hist[-1]}, G_loss: {g_loss_hist[-1]}")
            save_generated_images(g_model, latent_dim,i, n=10)

    # Save the generator model
    g_model.save('generator_model.h5')
    return d_loss1_hist, d_loss2_hist, g_loss_hist

# Size of the latent space
latent_dim = 100
# Create the discriminator
discriminator = define_discriminator()
# Create the generator
generator = define_generator(latent_dim)
# Create the GAN
gan_model = define_gan(generator, discriminator)
# Train model
# Train the model and get the loss histories
d_loss1_hist, d_loss2_hist, g_loss_hist = train(generator, discriminator, gan_model, dataset, latent_dim, n_epochs=25000)  # Example with 200 epochs

# Function to plot loss curves
def save_loss_curves(d_loss1_hist, d_loss2_hist, g_loss_hist):
    plt.figure(figsize=(10, 5))
    plt.plot(d_loss1_hist, label='Discrim_Real_loss')
    plt.plot(d_loss2_hist, label='Discrim_Fake_loss')
    plt.plot(g_loss_hist, label='Gen_loss')
    plt.xlabel('Epochs')
    plt.ylabel('Loss')
    plt.legend()
    plt.title('Loss Curves')
    plt.savefig(f"{generated_images_dir}/loss_curves.png")
    plt.close()  # Close the plot to free memory

# Plot the loss curves after training
save_loss_curves(d_loss1_hist, d_loss2_hist, g_loss_hist)

